{
  "name": "Primavera_EnsureSuccessApiResult",
  "dataSource": "Primavera",
  "expression": "if (args == null || !args.ContainsKey(\"requestResult\"))\r\n                throw new Exception($\"Argument 'requestResult' can't be null to validate Api result.\");\r\n\r\n            var requestResult = (HttpResponseMessage)args[\"requestResult\"];\r\n\r\n            if (requestResult.IsSuccessStatusCode) return null;\r\n\r\n            switch (requestResult.StatusCode)\r\n            {\r\n                case HttpStatusCode.Forbidden:\r\n                    {\r\n                        throw new Exception(\r\n                            ComposeResponseMessage(\r\n                                $\"Forbidden request: '{requestResult.RequestMessage.RequestUri.AbsolutePath}'\"));\r\n                        \r\n                    }\r\n                case HttpStatusCode.NotFound:\r\n                    {\r\n                        throw new Exception(ComposeResponseMessage(\"Not found\"));\r\n                    }\r\n                default:\r\n                    var resultText = requestResult.Content.ReadAsStringAsync().Result;\r\n                    var resultObject = JsonConvert.DeserializeObject<Dictionary<string, object>>(resultText);\r\n\r\n                    throw new Exception(ComposeResponseMessage(resultObject[\"message\"]?.ToString()));\r\n            }\r\n\r\n            string ComposeResponseMessage(string errorMessage)\r\n            {\r\n                var message = args.ContainsKey(\"message\") ? $\"{args[\"message\"]}: \" : string.Empty;\r\n                message += errorMessage;\r\n                return message;\r\n            }",
  "description": "Ensure that an API request has been executed with success.\nThe request receives an argument \"requestResult\" and throws an exception in case of error.\t\t\t",
  "executionLocation": "External",
  "behaviourNamespaces": [
    {
      "name": "NetHttp",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "System.Net.Http"
    }
  ]
}