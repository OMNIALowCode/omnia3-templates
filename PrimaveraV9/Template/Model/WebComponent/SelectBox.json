{
  "name": "SelectBox",
  "expression": "// The component only supports en-us and pt-pt languages\r\nconst TRANSLATIONS = {\r\n    default: {\r\n        DefaultOption: 'Please select a value',\r\n        \r\n    },\r\n    ptpt: {\r\n        DefaultOption: 'Selecione uma opção',\r\n    }\r\n};\r\n\r\nfunction getTranslation(translation, language) {\r\n    const translationSet = language != null ? TRANSLATIONS[language.toLowerCase()] || TRANSLATIONS.default : TRANSLATIONS.default;\r\n    return translationSet ? translationSet[translation] : translation;\r\n}\r\n\r\nfunction getDefaultOption(translator){\r\n\treturn { value: '', text: getTranslation('DefaultOption',  translator ? translator.language : null) };\r\n}\r\n\r\nfunction getSelectOption(opt, translator){\r\n\tconst option = document.createElement('option');\r\n\toption.value = opt.value;\r\n\toption.text = translator ? translator.translateToApplication(opt.text) : opt.text;\r\n\treturn option;\r\n}\r\n\r\nclass OmniaSelect extends HTMLElement {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\r\n\t\tthis._options = [];\r\n        this._text = \"\";\r\n        this._translator = null;\r\n\t\tthis.valueUpdated = this.valueUpdated.bind(this);\r\n\r\n\t\tthis._select = document.createElement('select');\r\n\t\tthis._select.setAttribute('class', 'form-control');\r\n\t}\r\n  \r\n\tconnectedCallback() {\r\n\t\tthis.renderOptions();\r\n\t\tthis._select.selectedIndex = 0;\r\n\t\t\r\n\t\tthis._select.addEventListener('change', this.valueUpdated);\r\n\t\t\r\n\t\tthis.appendChild(this._select);\r\n\t}\r\n\t\r\n\tdisconnectedCallback() {\r\n\t\tthis._select.removeEventListener('change', this.valueUpdated);\r\n\t}\r\n\t\r\n\tvalueUpdated() {\r\n\t\tconst currentSelection = this._select.selectedIndex;\r\n\t\tthis.dispatchEvent(new CustomEvent('value-updated', { detail: { value: currentSelection > 0 ? this._options[currentSelection - 1].value : '' } }));\r\n\t}\r\n\t\r\n\trenderOptions() {\r\n\t\tthis._select.innerHTML = '';\r\n\t\t\r\n\t\tthis._select.append(getSelectOption(getDefaultOption(this._translator)));\r\n\t\tfor(const option of this._options)\r\n\t\t\tthis._select.appendChild(getSelectOption(option, this._translator));\r\n\r\n        const newValueIndex = this._options.map(obj => obj.value).indexOf(this._value) + 1;\r\n\t\tthis._select.selectedIndex = newValueIndex >= 0 ? newValueIndex : 0;\r\n\t    if (this._options[newValueIndex - 1])\r\n\t\t\tthis._text = this._options[newValueIndex - 1].text;\r\n\t}\r\n  \r\n    set value(newValue) {\r\n        this._value = newValue;\r\n        this.renderOptions();\r\n    }\r\n    \r\n    get options() {\r\n        return this._options;\r\n    }\r\n\t\r\n\tget text() {\r\n\t\treturn this._text;\r\n\t}\r\n\t\r\n\tset options(newValue) {\r\n\t\tthis._options = newValue;\r\n\t\tthis.renderOptions();\r\n\t}\r\n\t\r\n\tset isReadOnly(newValue)\r\n    {\r\n        this._select.disabled = (newValue === true);\r\n\t}\r\n\t\r\n\tset context(newValue) {\r\n        if (newValue) {\r\n            this._translator = newValue.getLanguageTranslator();\r\n\t\t\tthis.renderOptions();\r\n        }\r\n    }\r\n}\r\n\r\ncustomElements.define('omnia-select', OmniaSelect);",
  "description": "",
  "customElementName": "omnia-select"
}