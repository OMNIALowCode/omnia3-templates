{
  "name": "Encrypt",
  "dataSource": "System",
  "expression": "if (args == null || !args.ContainsKey(\"Text\"))\r\n    throw new ArgumentNullException(\"Text\", \"Missing required argument 'Text'.\");\r\n\r\nvar keyString = SystemApplicationBehaviours.GetEncryptionKey()[\"key\"].ToString();\r\nvar key = Encoding.UTF8.GetBytes(keyString.PadRight(32).Substring(0, 32));\r\nvar text = args[\"Text\"].ToString();\r\n\r\nusing (var aes = Aes.Create())\r\nusing (var encryptor = aes.CreateEncryptor(key, aes.IV))\r\nusing (var msEncrypt = new MemoryStream())\r\nusing (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\r\n{\r\n    using (var swEncrypt = new StreamWriter(csEncrypt))\r\n    {\r\n        swEncrypt.Write(text);\r\n    }\r\n\r\n    var iv = aes.IV;\r\n    var decryptedContent = msEncrypt.ToArray();\r\n    var result = new byte[iv.Length + decryptedContent.Length];\r\n\r\n    Buffer.BlockCopy(iv, 0, result, 0, iv.Length);\r\n    Buffer.BlockCopy(decryptedContent, 0, result, iv.Length, decryptedContent.Length);\r\n\r\n    return new Dictionary<string, object>\r\n    {\r\n        {\"EncryptedText\", Convert.ToBase64String(result)}\r\n    };\r\n}",
  "description": "Encrypt a given text provided by the argument \"Text\" and returns the encrypted text.",
  "executionLocation": "Internal",
  "behaviourNamespaces": [
    {
      "name": "SystemSecurityCryptography",
      "description": "",
      "executionLocation": "Internal",
      "fullyQualifiedName": "System.Security.Cryptography"
    },
    {
      "name": "SystemText",
      "description": "",
      "executionLocation": "Internal",
      "fullyQualifiedName": "System.Text"
    },
    {
      "name": "SystemIO",
      "description": "",
      "executionLocation": "Internal",
      "fullyQualifiedName": "System.IO"
    }
  ]
}