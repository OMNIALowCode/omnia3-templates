{
  "name": "SendEmailNotification",
  "dataSource": "System",
  "expression": "            if (args == null)\r\n                throw new ArgumentNullException(nameof(args), \"Missing arguments 'UsingExternalSmtpServer', 'Dto', 'SendTo', 'SubjectTextTemplate', 'BodyTextTemplate'.\");\r\n\r\n            var usingExternalSmtpServer = false;\r\n\r\n            if (args.ContainsKey(\"UsingExternalSmtpServer\"))\r\n                usingExternalSmtpServer = Convert.ToBoolean(args[\"UsingExternalSmtpServer\"]);\r\n\r\n            if (!args.ContainsKey(\"Dto\"))\r\n                throw new Exception(\"Dto was not sent to email notification.\");\r\n            var dto = JsonConvert.DeserializeObject<Dictionary<string, object>>(JsonConvert.SerializeObject(args[\"Dto\"]));\r\n\r\n            if (!args.ContainsKey(\"SendTo\"))\r\n                throw new Exception(\"SendTo parameter was not sent to email notification.\");\r\n            var sendTo = args[\"SendTo\"].ToString();\r\n\r\n            if (!args.ContainsKey(\"SubjectTextTemplate\"))\r\n                throw new Exception(\"SubjectTextTemplate parameter was not sent to email notification.\");\r\n            var subjectTextTemplate = args[\"SubjectTextTemplate\"].ToString();\r\n\r\n            if (!args.ContainsKey(\"BodyTextTemplate\"))\r\n                throw new Exception(\"BodyTextTemplate parameter was not sent to email notification.\");\r\n            var bodyTextTemplate = args[\"BodyTextTemplate\"].ToString();\r\n\r\n            var httpClient = context.CreateApplicationHttpClient();\r\n\r\n            if (usingExternalSmtpServer)\r\n                return SendExternalSmtpEmail();\r\n            else\r\n                return SendApiEmail();\r\n\r\n\r\n            Dictionary<string, object> GetSMTPConfiguration()\r\n            {\r\n                return httpClient.GetAsync<Dictionary<string, object>>(\"Settings/Default/SMTP\").GetAwaiter().GetResult();\r\n            }\r\n\r\n            Dictionary<string, object> SendApiEmail()\r\n            {\r\n                var emailRequestData = new\r\n                {\r\n                    To = new[] { new { Address = sendTo } },\r\n                    Subject = new { Template = subjectTextTemplate, TemplateData = dto },\r\n                    Body = new { Template = bodyTextTemplate, TemplateData = dto }\r\n                };\r\n                try\r\n                {\r\n                    var emailResult = httpClient.PostAsync(\"Email\", emailRequestData);\r\n                }\r\n                catch (Exception)\r\n                {\r\n                    throw;\r\n                }\r\n                return new Dictionary<string, object>();\r\n            }\r\n\r\n            Dictionary<string, object> SendExternalSmtpEmail()\r\n            {\r\n                Dictionary<string, object> smtpConfiguration = GetSMTPConfiguration();\r\n\r\n                string host = smtpConfiguration[\"host\"].ToString();\r\n                int port = Int32.Parse(smtpConfiguration[\"port\"].ToString());\r\n                string username = smtpConfiguration[\"username\"].ToString();\r\n\r\n                string from = smtpConfiguration[\"from\"].ToString();\r\n                bool enableSsl = bool.Parse(smtpConfiguration[\"enableSsl\"].ToString());\r\n                string password = smtpConfiguration[\"password\"] != null ? smtpConfiguration[\"password\"].ToString() : string.Empty;\r\n                var decryptArgs = new Dictionary<string, object> { { \"EncryptedText\", password } };\r\n                var decrypted = SystemApplicationBehaviours.Decrypt(decryptArgs);\r\n                using (var client = new SmtpClient())\r\n                {\r\n                    client.Timeout = 5000;\r\n                    client.Port = port;\r\n                    client.DeliveryMethod = SmtpDeliveryMethod.Network;\r\n                    client.UseDefaultCredentials = false;\r\n                    client.Credentials = new NetworkCredential(username, decrypted[\"DecryptedText\"].ToString());\r\n                    client.EnableSsl = enableSsl;\r\n                    client.Host = host;\r\n                    MailMessage mail = new MailMessage(from, sendTo)\r\n                    {\r\n                        Subject = ApplyTextTemplate(subjectTextTemplate),\r\n                        Body = ApplyTextTemplate(bodyTextTemplate),\r\n                        IsBodyHtml = true\r\n                    };\r\n                    try\r\n                    {\r\n                        client.Send(mail);\r\n                    }\r\n                    catch (SmtpException)\r\n                    {\r\n                        throw;\r\n                    }\r\n                    return new Dictionary<string, object>();\r\n                }\r\n            }\r\n\r\n            string ApplyTextTemplate(string template)\r\n            {\r\n                var httpResponse = httpClient.PostAsync($\"Texttemplates/{template}\", dto).GetAwaiter().GetResult();\r\n\r\n                return httpResponse.Content.ReadAsStringAsync().GetAwaiter().GetResult();\r\n            }",
  "description": "Sends an Email Notification over SMTP.\nThis application behaviour requires the arguments: \"Email\", \"Subject\" and \"Body\".\nTo execute, is required to configure the SMTP Settings with the Generic Entity \"Settings\"",
  "executionLocation": "Internal",
  "behaviourNamespaces": [
    {
      "name": "SystemNetMail",
      "description": "",
      "executionLocation": "Internal",
      "fullyQualifiedName": "System.Net.Mail"
    },
    {
      "name": "SystemNet",
      "description": "",
      "executionLocation": "Internal",
      "fullyQualifiedName": "System.Net"
    }
  ]
}