{
  "name": "Primavera",
  "attributes": [
    {
      "name": "_code",
      "type": "Text",
      "length": null,
      "isSystem": true,
      "isReadOnly": false,
      "description": null,
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": null
    },
    {
      "name": "_name",
      "type": "Text",
      "length": null,
      "isSystem": true,
      "isReadOnly": false,
      "description": null,
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": null
    },
    {
      "name": "_description",
      "type": "Text",
      "length": null,
      "isSystem": true,
      "isReadOnly": false,
      "description": null,
      "multiplicity": {
        "lower": 0,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": null
    },
    {
      "name": "_inactive",
      "type": "Boolean",
      "length": null,
      "isSystem": true,
      "isReadOnly": false,
      "description": null,
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": null
    },
    {
      "name": "_connector",
      "type": "Text",
      "length": null,
      "isSystem": true,
      "isReadOnly": false,
      "description": null,
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": null
    },
    {
      "name": "Username",
      "type": "Text",
      "length": null,
      "isSystem": false,
      "isReadOnly": false,
      "description": "",
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": ""
    },
    {
      "name": "Password",
      "type": "Text",
      "length": null,
      "isSystem": false,
      "isReadOnly": false,
      "description": "",
      "multiplicity": {
        "lower": 0,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": ""
    },
    {
      "name": "DatabaseInstance",
      "type": "Text",
      "length": null,
      "isSystem": false,
      "isReadOnly": false,
      "description": "",
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": ""
    },
    {
      "name": "NewPassword",
      "type": "Text",
      "length": null,
      "isSystem": false,
      "isReadOnly": true,
      "description": "",
      "multiplicity": {
        "lower": 0,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": ""
    },
    {
      "name": "ChangePassword",
      "type": "Boolean",
      "length": null,
      "isSystem": false,
      "isReadOnly": false,
      "description": "",
      "multiplicity": {
        "lower": 0,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": null,
      "dependsOnAttribute": ""
    },
    {
      "name": "PlatformType",
      "type": "ERPPlatformType",
      "length": {
        "maximum": null,
        "minimum": 0
      },
      "isSystem": false,
      "isReadOnly": false,
      "description": "",
      "multiplicity": {
        "lower": 1,
        "upper": 1
      },
      "aggregationKind": "None",
      "isSensitiveData": false,
      "dependsOnAttribute": ""
    }
  ],
  "description": "",
  "dataBehaviours": [],
  "behaviourRuntime": "Internal",
  "entityBehaviours": [
    {
      "name": "Initializer",
      "type": "Initialize",
      "attribute": null,
      "expression": "if (this._Context.Operation.IsNew)\r\n{\r\n    DatabaseInstance = \"Default\";\r\n}",
      "description": ""
    },
    {
      "name": "BeforeSave",
      "type": "BeforeSave",
      "attribute": null,
      "expression": "if(_Context.Operation.Action != Action.EntityCreate && _Context.Operation.Action != Action.EntityUpdate)\n    return;\n\nif (!((bool)this.ChangePassword))\n    return;\n\nthis.Password = Cryptography.Data.Encrypt(this.NewPassword); \nthis.ChangePassword = false;\nthis.NewPassword = \"\";",
      "description": ""
    }
  ],
  "dataAccessRuntime": "External",
  "behaviourNamespaces": [],
  "executesInConnector": true,
  "behaviourDependencies": [
    {
      "name": "StdBE100",
      "path": "%ProgramFiles(x86)%\\PRIMAVERA\\SG100\\Apl\\StdBE100.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "StdBE100",
      "executionLocation": "External"
    },
    {
      "name": "ErpBS100",
      "path": "%ProgramFiles(x86)%\\PRIMAVERA\\SG100\\Apl\\ErpBS100.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "ErpBS100",
      "executionLocation": "External"
    },
    {
      "name": "RhpBE100",
      "path": "%ProgramFiles(x86)%\\PRIMAVERA\\SG100\\Apl\\RhpBE100.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "RhpBE100",
      "executionLocation": "External"
    },
    {
      "name": "IRhpBS100",
      "path": "%ProgramFiles(x86)%\\PRIMAVERA\\SG100\\Apl\\IRhpBS100.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "IRhpBS100",
      "executionLocation": "External"
    },
    {
      "name": "StdPlatBS100",
      "path": "%ProgramFiles(x86)%\\PRIMAVERA\\SG100\\Apl\\StdPlatBS100.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "StdPlatBS100",
      "executionLocation": "External"
    },
    {
      "name": "Cryptography",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "    using global::System;\n    using global::System.IO;\n    using global::System.Security.Cryptography;\n    using global::System.Text;\n    using static System.Net.Mime.MediaTypeNames;\n    using System.Collections.Generic;\n\n    namespace Cryptography\n    {\n        public static class Data\n        {\n            public static string Decrypt(string encryptedText)\n            {\n                var keyString = GetEncryptionKey();\n                var fullCipher = Convert.FromBase64String(encryptedText);\n\n                var iv = new byte[16];\n                var cipher = new byte[fullCipher.Length - iv.Length];\n\n                Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);\n                Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, fullCipher.Length - iv.Length);\n                var key = Encoding.UTF8.GetBytes(keyString.PadRight(32).Substring(0, 32));\n\n                using (var aesAlg = Aes.Create())\n                using (var decryptor = aesAlg.CreateDecryptor(key, iv))\n                using (var msDecrypt = new MemoryStream(cipher))\n                using (var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))\n                using (var srDecrypt = new StreamReader(csDecrypt))\n                    return srDecrypt.ReadToEnd();\n            }\n\n            public static string Encrypt(string text)\n            {\n                var keyString = GetEncryptionKey();\n                var key = Encoding.UTF8.GetBytes(keyString.PadRight(32).Substring(0, 32));\n\n                using (var aes = Aes.Create())\n                using (var encryptor = aes.CreateEncryptor(key, aes.IV))\n                using (var msEncrypt = new MemoryStream())\n                using (var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n                {\n                    using (var swEncrypt = new StreamWriter(csEncrypt))\n                        swEncrypt.Write(text);\n\n                    var iv = aes.IV;\n                    var decryptedContent = msEncrypt.ToArray();\n                    var result = new byte[iv.Length + decryptedContent.Length];\n                    Buffer.BlockCopy(iv, 0, result, 0, iv.Length);\n                    Buffer.BlockCopy(decryptedContent, 0, result, iv.Length, decryptedContent.Length);\n                    return Convert.ToBase64String(result);\n                }\n            }\n\n            private static string GetEncryptionKey() => \"sm5VBrWG0fmyRs5GzUJwGzJbXJ42M3GK6BXtZZ26dmzilze9ZV\";\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "ApiHelpers",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "    using global::Omnia.Libraries.Infrastructure.Behaviours;\n    using global::System;\n    using global::System.Collections.Generic;\n    using global::System.Net;\n    using global::System.Net.Http;\n    using global::Newtonsoft.Json;\n    using System.Threading.Tasks;\n\n    namespace ApiHelpers\n    {\n        public class RequestResults\n        {\n            public static void EnsureSuccessApiResult(HttpResponseMessage requestResult, Context context, string message = \"\") => EnsureSuccessApiResultAsync(requestResult, context, message).ConfigureAwait(false).GetAwaiter().GetResult();\n            public static async Task EnsureSuccessApiResultAsync(HttpResponseMessage requestResult, Context context, string message = \"\")\n            {\n                if (requestResult.IsSuccessStatusCode) return;\n\n                switch (requestResult.StatusCode)\n                {\n                    case HttpStatusCode.Forbidden: throw new Exception(ComposeResponseMessage($\"Forbidden request: '{requestResult.RequestMessage.RequestUri.AbsolutePath}'\"));\n                    case HttpStatusCode.NotFound: throw new Exception(ComposeResponseMessage(\"Not found\"));\n                    default:\n                        var resultText = await requestResult.Content.ReadAsStringAsync();\n                        var resultObject = JsonConvert.DeserializeObject<Dictionary<string, object>>(resultText);\n                        throw new Exception(ComposeResponseMessage(resultObject[\"message\"]?.ToString()));\n                }\n\n                string ComposeResponseMessage(string errorMessage)\n                {\n                    var concatenatedMessage = string.IsNullOrEmpty(message) ? $\"{message}: \" : string.Empty;\n                    concatenatedMessage += errorMessage;\n                    return concatenatedMessage;\n                }\n            }\n\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "ERPHelpers",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "    using ErpBS100;\n    using Microsoft.Extensions.Logging;\n    using Omnia.Libraries.Infrastructure.Behaviours;\n    using StdPlatBS100;\n    using System;\n    using System.Net.Http;\n    using System.Runtime.Caching;\n    using System.Threading.Tasks;\n    using static StdBE100.StdBETipos;\n\n    namespace ERP\n    {\n        public static class Connection\n        {\n            public static string GetConnectionString(Context context, string company) => GetConnectionStringAsync(context, company).ConfigureAwait(false).GetAwaiter().GetResult();\n            public static async Task<string> GetConnectionStringAsync(Context context, string company)\n            {\n                var instancia = \"Default\";\n                var cache = context.CreateCacheClient();\n                var logger = context.Services.GetService<ILogger<Context>>();\n                logger.LogInformation($\"GetConnectionString: {company}/{instancia}\");\n\n                var connectionString = await cache.GetAsync<string>($\"{company}_{instancia}\");\n\n                if (string.IsNullOrEmpty(connectionString))\n                {\n                    try\n                    {\n                        var bsPlat = await OpenPlatformAsync(company, \"RHP\", context);\n                        connectionString = bsPlat.BaseDados.DaConnectionString($\"PRI{company}\", instancia);\n                        if (!string.IsNullOrEmpty(connectionString))\n                            await cache.SetAsync($\"{company}_{instancia}\", connectionString);\n                        else\n                            throw new Exception();\n                    }\n                    catch (Exception ex)\n                    {\n                        throw new Exception($\"Could not get connection string for database {company} in instance {instancia}: {ex.Message}\");\n                    }\n\n                    logger.LogInformation($\"GetConnectionString: {company}/{instancia}: Set Cache\");\n                }\n\n                return connectionString;\n            }\n            public static async Task RemoveConnectionStringAsync(Context context, string baseDados, string instancia)\n            {\n                var cache = context.CreateCacheClient();\n                await cache.RemoveAsync($\"{baseDados}_{instancia}\");\n            }\n            public static ErpBS100.ErpBS OpenCompany(string company, Context context) => OpenCompanyAsync(company, context).ConfigureAwait(false).GetAwaiter().GetResult();\n            public static async Task<ErpBS100.ErpBS> OpenCompanyAsync(string company, Context context)\n            {\n                string erpCompany;\n                if (context.Operation.DataSourceType.Equals(\"Primavera\", StringComparison.InvariantCultureIgnoreCase))\n                    erpCompany = context.Operation.DataSource;\n                else\n                    erpCompany = company;\n\n                try\n                {\n                    return await ErpBSFactory.GetErpBSCacheAsync(erpCompany, context);\n                }\n                catch (Exception ex)\n                {\n                    throw new Exception($\"Error opening ERP Company {erpCompany}: {ex.Message}\");\n                }\n            }\n            public static StdPlatBS100.StdPlatBS OpenPlatform(string company, string module, Context context = null) => null;\n            public static async Task<StdPlatBS100.StdPlatBS> OpenPlatformAsync(string company, string module, Context context = null)\n            {\n                string erpCompany;\n                if (context.Operation.DataSourceType.Equals(\"Primavera\", StringComparison.InvariantCultureIgnoreCase))\n                    erpCompany = context.Operation.DataSource;\n                else\n                    erpCompany = company;\n\n                try\n                {\n                    return await ErpBSFactory.GetStdPlatBSCacheAsync(erpCompany, module, context);\n                }\n                catch (Exception ex)\n                {\n                    throw new Exception($\"Error opening ERP Platform: {ex.Message}\");\n                }\n            }\n        }\n\n        public static class ErpBSFactory\n        {\n            private static MemoryCache _cache = MemoryCache.Default;\n\n            private static void RemovedCallbackErpBS(CacheEntryRemovedArguments arg)\n            {\n                if (arg.RemovedReason != CacheEntryRemovedReason.Removed)\n                {\n                    var item = arg.CacheItem.Value as Lazy<ErpBS>;\n\n                    if (item != null)\n                    {\n                        var erpBS = item.Value as ErpBS;\n\n                        if (erpBS != null)\n                        {\n                            try\n                            {\n                                erpBS.FechaEmpresaTrabalho();\n                                erpBS.FechaLigacaoBaseDados();\n                                erpBS.Dispose();\n                                GC.Collect();\n                            }\n                            catch (Exception ex)\n                            {\n                            }\n                        }\n                    }\n                    else\n                    {\n                    }\n                }\n            }\n\n            private static void RemovedCallbackStdPlatBS(CacheEntryRemovedArguments arg)\n            {\n                if (arg.RemovedReason != CacheEntryRemovedReason.Removed)\n                {\n                    var item = arg.CacheItem.Value as Lazy<StdPlatBS>;\n\n                    if (item != null)\n                    {\n                        var stdPlatBS = item.Value as StdPlatBS;\n\n                        if (stdPlatBS != null)\n                        {\n                            try\n                            {\n                                stdPlatBS.FechaPlataformaEmpresa();\n                                stdPlatBS.FechaPlataformaPRIEMPRE();\n                                stdPlatBS.FechaPlataforma();\n                                stdPlatBS.FechaLigacaoBaseDados();\n                                GC.Collect();\n                            }\n                            catch (Exception ex)\n                            {\n                            }\n                        }\n                    }\n                    else\n                    {\n                    }\n                }\n            }\n\n            private static T AddOrGetExisting<T>(string key, Func<T> valueFactory, CacheEntryRemovedCallback callBack)\n            {\n                try\n                {\n                    var newValue = new Lazy<T>(valueFactory);\n\n                    var oldValue = _cache.AddOrGetExisting(key, newValue, new CacheItemPolicy() { Priority = CacheItemPriority.NotRemovable, RemovedCallback = callBack }) as Lazy<T>;\n\n                    return (oldValue ?? newValue).Value;\n                }\n                catch (Exception ex)\n                {\n                    _cache.Remove(key);\n                    throw;\n                }\n            }\n\n            private static Task<ErpBS> GetErpBSAsync(string key, Context context, string company) => Task.FromResult(AddOrGetExisting<ErpBS>(key, () => InitErpBSAsync(key, context, company).ConfigureAwait(false).GetAwaiter().GetResult(), RemovedCallbackErpBS));\n            private static async Task<ErpBS> InitErpBSAsync(string key, Context context, string company)\n            {\n\n                var logger = context.Services.GetService<ILogger<Context>>();\n                logger.LogInformation($\"InitErpBSAsync {key}\");\n\n                AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(CurrentDomain_AssemblyResolve);\n\n                ErpBS bsERP = new ErpBS();\n\n                try\n                {\n                    var platformType = EnumTipoPlataforma.tpEmpresarial;\n                    var httpClient = context.CreateApplicationHttpClient();\n\n                    var primaveraResult = await httpClient.GetAsync($\"Primavera/Default/{company}\");\n\n                    var data = await primaveraResult.Content.ReadAsAsync<PrimaveraDto>();\n\n                    Enum.TryParse(data.PlatformType.Value.ToString(), out platformType);\n\n                    var decrypted = Cryptography.Data.Decrypt(data.Password);\n\n                    bsERP.AbreEmpresaTrabalho(platformType, company, data.Username, decrypted, null, data.DatabaseInstance);\n\n                    return bsERP;\n                }\n                catch (Exception ex) { throw ex; }\n            }\n            private static Task<StdPlatBS> GetStdPlatBSAsync(string key, Context context, string company, string module)\n                => Task.FromResult(AddOrGetExisting<StdPlatBS>(key, () => InitStdPlatBSAsync(key, context, company, module).ConfigureAwait(false).GetAwaiter().GetResult(), RemovedCallbackStdPlatBS));\n            private static async Task<StdPlatBS> InitStdPlatBSAsync(string key, Context context, string company, string module)\n            {\n\n                var logger = context.Services.GetService<ILogger<Context>>();\n                logger.LogInformation($\"InitStdPlatBSAsync {key}\");\n\n                try\n                {\n                    var platformType = EnumTipoPlataforma.tpEmpresarial;\n\n                    var httpClient = context.CreateApplicationHttpClient();\n                    var primaveraResult = await httpClient.GetAsync($\"Primavera/Default/{company}\");\n\n                    await ApiHelpers.RequestResults.EnsureSuccessApiResultAsync(primaveraResult, context);\n\n                    var data = await primaveraResult.Content.ReadAsAsync<PrimaveraDto>();\n\n                    Enum.TryParse(data.PlatformType.Value.ToString(), out platformType);\n                    var decrypted = Cryptography.Data.Decrypt(data.Password);\n\n                    StdPlatBS bsPlat = new StdPlatBS();\n                    var conf = new StdBSConfApl\n                    {\n                        NomeAplicacao = \"\",\n                        AbvtApl = module,\n                        Instancia = data.DatabaseInstance,\n                        Utilizador = data.Username,\n                        PwdUtilizador = decrypted,\n                        LicVersaoMinima = \"10.00\"\n                    };\n\n                    bsPlat.AbrePlataformaEmpresa(company, null, conf, platformType);\n\n                    return bsPlat;\n                }\n                catch (Exception ex)\n                {\n                    throw ex;\n                }\n            }\n            private static System.Reflection.Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args)\n            {\n                string assemblyFullName = \"\";\n                try\n                {\n                    System.Reflection.AssemblyName assemblyName;\n\n                    string PRIMAVERA_FOLDER = System.IO.Path.GetFullPath(Environment.GetEnvironmentVariable(\"PERCURSOSGE100\"));\n                    if (string.IsNullOrEmpty(PRIMAVERA_FOLDER))\n                    {\n                        PRIMAVERA_FOLDER = System.IO.Path.GetFullPath(Environment.GetEnvironmentVariable(\"PERCURSOSGP100\"));\n                    }\n\n                    assemblyName = new System.Reflection.AssemblyName(args.Name);\n                    assemblyFullName = System.IO.Path.Combine(PRIMAVERA_FOLDER, assemblyName.Name + \".dll\");\n                }\n                catch (Exception e)\n                {\n                }\n\n                if (System.IO.File.Exists(assemblyFullName))\n                    return System.Reflection.Assembly.LoadFile(assemblyFullName);\n                else\n                    return null;\n            }\n\n\n            public static async Task<ErpBS> GetErpBSCacheAsync(string company, Context context) => await GetErpBSAsync($\"GetErpBSCacheAsync{company}\", context, company);\n            public static async Task<StdPlatBS> GetStdPlatBSCacheAsync(string company, string module, Context context) => await GetStdPlatBSAsync($\"GetStdPlatBSCacheAsync{company}\", context, company, module);\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "ReadEntities",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "    namespace ERP\n    {\n        using Omnia.Libraries.Infrastructure.Behaviours;\n        using System;\n        using System.Collections.Generic;\n        using System.Data.SqlClient;\n        using System.Text;\n        using Omnia.Libraries.Infrastructure.Behaviours.Query;\n        using Microsoft.Extensions.Logging;\n        using System.Threading.Tasks;\n\n        public class Entities\n        {\n\n            public static async Task<List<IDictionary<string, object>>> QueryERP(string dataSource, string query, Context context)\n            {\n                var queryData = new ListQueryDefinition()\n                {\n                    ErpCompany = dataSource,\n                    QueryString = query,\n                    IsPaginatedQuery = false,\n                };\n\n                var queryResult = await ReadListAsync(queryData, context);\n                return queryResult.Data;\n            }\n            public static ReadListResult ReadList(ListQueryDefinition queryDefinition, Context context) => ReadListAsync(queryDefinition, context).GetAwaiter().GetResult();\n            public static async Task<ReadListResult> ReadListAsync(ListQueryDefinition queryDefinition, Context context)\n            {\n                var logger = context.Services.GetService<ILogger<Context>>();\n\n                logger.LogInformation(\"Entered Behaviour\");\n                ReadListResult result = new ReadListResult();\n                var data = new List<IDictionary<string, object>>();\n\n                if (queryDefinition.Page == 0 && queryDefinition.IsPaginatedQuery)\n                    throw new Exception(\"Page was not sent\");\n\n                if (string.IsNullOrEmpty(queryDefinition.KeyParameter) && queryDefinition.IsPaginatedQuery)\n                    throw new Exception(\"Key Parameter was not sent\");\n\n                var filterSql = new StringBuilder();\n                var sortSql = new StringBuilder();\n\n                var parameters = new List<SqlParameter>();\n\n                if (queryDefinition.QueryContext != null)\n                {\n                    queryDefinition.QueryString = queryDefinition.QueryContext.QueryDefinition?.Expression;\n                    BuildFilter(queryDefinition.QueryContext.Filter);\n                    BuildSort();\n\n                    foreach (var parameter in queryDefinition.QueryContext.Parameters)\n                        queryDefinition.Parameters.Add(parameter.Name, parameter.Value?.ToString());\n                }\n\n                if (string.IsNullOrEmpty(queryDefinition.QueryString))\n                    throw new ArgumentNullException(\"Missing query to execute ReadList\");\n\n                if (!queryDefinition.Parameters.ContainsKey(\"PRIMAVERA_COMPANY\"))\n                    queryDefinition.Parameters.Add(\"PRIMAVERA_COMPANY\", queryDefinition.ErpCompany);\n\n                // Apply parameters\n                foreach (var entry in queryDefinition.Parameters)\n                {\n                    var parameterName = $\"@parameter_{entry.Key}\";\n                    queryDefinition.QueryString = queryDefinition.QueryString.Replace($\"'@{entry.Key}@'\", parameterName).Replace($\"@{entry.Key}@\", parameterName);\n                    \n                    if (entry.Value is null)\n                        parameters.Add(new SqlParameter(parameterName, DBNull.Value));\n                    else\n                        parameters.Add(new SqlParameter(parameterName, entry.Value));\n                }\n\n                var filterSqlAsString = filterSql.ToString();\n\n                string query = queryDefinition.QueryString;\n\n                if (queryDefinition.IsPaginatedQuery)\n                {\n                    query = \"SELECT * FROM \" +\n        \"(SELECT Count(@OMNIA_QUERYKEYPARAMETER@) over() as _OMNIA_NUMBER_OF_ROWS_, ROW_NUMBER() OVER(ORDER BY @OMNIA_QUERYSORT@) AS _OMNIA_ROW_NUMBER_, INNER_TBL.* FROM ( \" +\n        \"@OMNIA_QUERY@ \" +\n        \") AS INNER_TBL \" +\n        (string.IsNullOrEmpty(filterSqlAsString) ? \"\" : \"WHERE (\" + filterSql.ToString() + \") \") +\n        \") AS TBL \" +\n        \"WHERE _OMNIA_ROW_NUMBER_ BETWEEN ((@OMNIA_PAGE@ - 1) * @OMNIA_ROWS@ + 1) AND (@OMNIA_PAGE@ * @OMNIA_ROWS@) \";\n\n\n                    query = query.Replace(\"@OMNIA_QUERY@\", queryDefinition.QueryString)\n                        .Replace(\"@OMNIA_PAGE@\", queryDefinition.Page.ToString())\n                        .Replace(\"@OMNIA_ROWS@\", queryDefinition.Rows.ToString())\n                        .Replace(\"@OMNIA_QUERYKEYPARAMETER@\", queryDefinition.KeyParameter.ToString())\n                        .Replace(\"@OMNIA_QUERYSORT@\", OrderByClause());\n                }\n\n                await QueryDatabase();\n\n                logger.LogInformation(\"Going to exit Behaviour\");\n\n                return result;\n\n                async Task QueryDatabase()\n                {\n                    string connectionString = await ERP.Connection.GetConnectionStringAsync(context, queryDefinition.ErpCompany);\n\n                    int numberOfRecords = 0;\n\n                    using (SqlConnection connection = new SqlConnection(connectionString))\n                    {\n                        await connection.OpenAsync();\n                        using (SqlCommand command = new SqlCommand(query, connection))\n                        {\n                            if (parameters.Count > 0)\n                                command.Parameters.AddRange(parameters.ToArray());\n\n                            using (SqlDataReader dataReader = await command.ExecuteReaderAsync())\n                            {\n                                if (dataReader.HasRows)\n                                {\n                                    while (await dataReader.ReadAsync())\n                                    {\n                                        if (!queryDefinition.IsPaginatedQuery)\n                                            numberOfRecords++;\n                                        else if (numberOfRecords == 0)\n                                            numberOfRecords = Convert.ToInt32(dataReader[\"_OMNIA_NUMBER_OF_ROWS_\"]);\n\n                                        Dictionary<string, object> entityData = new Dictionary<string, object>();\n                                        for (short j = 0; j < dataReader.FieldCount; j++)\n                                        {\n                                            var nome = dataReader.GetName(j);\n                                            if (!nome.Equals(\"_OMNIA_NUMBER_OF_ROWS_\") && !nome.Equals(\"_OMNIA_ROW_NUMBER_\"))\n                                                entityData.Add(nome, dataReader[nome]);\n                                        }\n                                        data.Add(entityData);\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    result.NumberOfRecords = numberOfRecords;\n                    result.Data = data;\n                }\n\n                string OrderByClause()\n                {\n                    var sortSqlText = sortSql.ToString();\n\n                    if (!string.IsNullOrEmpty(sortSqlText))\n                        return sortSqlText;\n\n                    if (string.IsNullOrEmpty(queryDefinition.QuerySort))\n                        return queryDefinition.KeyParameter.ToString();\n\n                    return queryDefinition.QuerySort;\n                }\n\n                void BuildFilter(QueryRequestFilter queryFilter)\n                {\n                    if (queryFilter == null) return;\n\n                    switch (queryFilter)\n                    {\n                        case UnaryQueryRequestFilter unaryFilter:\n                            {\n                                filterSql.Append(unaryFilter.Path);\n\n                                if (unaryFilter.Value == null)\n                                {\n                                    filterSql.Append(\" IS NULL \");\n                                    break;\n                                }\n\n                                switch (unaryFilter.Operator)\n                                {\n                                    case QueryComparisonOperator.EqualTo:\n                                        filterSql.Append(\" = \");\n                                        break;\n                                    case QueryComparisonOperator.GreaterThan:\n                                        filterSql.Append(\" > \");\n                                        break;\n                                    case QueryComparisonOperator.LessThan:\n                                        filterSql.Append(\" < \");\n                                        break;\n                                    case QueryComparisonOperator.GreaterThanOrEqualTo:\n                                        filterSql.Append(\" >= \");\n                                        break;\n                                    case QueryComparisonOperator.LessThanOrEqualTo:\n                                        filterSql.Append(\" <= \");\n                                        break;\n                                    case QueryComparisonOperator.NotEqualTo:\n                                        filterSql.Append(\" <> \");\n                                        break;\n                                    case QueryComparisonOperator.Like:\n                                    case QueryComparisonOperator.EndsWith:\n                                        filterSql.Append(\" LIKE CONCAT('%', \");\n                                        break;\n                                    case QueryComparisonOperator.NotEndsWith:                                    \n                                    case QueryComparisonOperator.NotLike:\n                                        filterSql.Append(\" NOT LIKE CONCAT('%', \");\n                                        break;\n                                    case QueryComparisonOperator.StartsWith:\n                                        filterSql.Append(\" LIKE CONCAT( \");\n                                        break;\n                                    case QueryComparisonOperator.NotStartsWith:\n                                        filterSql.Append(\" NOT LIKE CONCAT( \");\n                                        break;\n                                    default:\n                                        throw new ArgumentOutOfRangeException();\n                                }\n\n                                var parameterName = $\"@filter_{unaryFilter.Path}_{Guid.NewGuid().ToString(\"N\")}\";\n                                filterSql.Append(parameterName);\n\n                                if (unaryFilter.Operator.Equals(QueryComparisonOperator.Like) || unaryFilter.Operator.Equals(QueryComparisonOperator.NotLike) || unaryFilter.Operator.Equals(QueryComparisonOperator.StartsWith) || unaryFilter.Operator.Equals(QueryComparisonOperator.NotStartsWith))\n                                    filterSql.Append(\", '%')\");\n\n                                if (unaryFilter.Operator.Equals(QueryComparisonOperator.EndsWith) || unaryFilter.Operator.Equals(QueryComparisonOperator.NotEndsWith))\n                                    filterSql.Append(\")\");\n\n                                parameters.Add(new SqlParameter(parameterName, unaryFilter.Value));\n                            }\n                            break;\n\n                        case BinaryQueryRequestFilter binaryFilter:\n                            {\n                                filterSql.Append('(');\n                                BuildFilter(binaryFilter.Left);\n\n                                switch (binaryFilter.Operator)\n                                {\n                                    case QueryLogicalOperator.And:\n                                        filterSql.Append(\" AND \");\n                                        break;\n                                    case QueryLogicalOperator.Or:\n                                        filterSql.Append(\" OR \");\n                                        break;\n                                    default:\n                                        throw new ArgumentOutOfRangeException();\n                                }\n\n                                BuildFilter(binaryFilter.Right);\n                                filterSql.Append(')');\n                            }\n                            break;\n                    }\n                }\n\n                void BuildSort()\n                {\n                    if (queryDefinition.QueryContext.Sort == null || queryDefinition.QueryContext.Sort.Length == 0) return;\n\n                    for (var i = 0; i < queryDefinition.QueryContext.Sort.Length; i++)\n                    {\n                        if (i > 0)\n                            sortSql.Append(\", \");\n\n                        sortSql.Append(queryDefinition.QueryContext.Sort[i].Property)\n                            .Append(\" \");\n\n                        switch (queryDefinition.QueryContext.Sort[i].Direction)\n                        {\n                            case QuerySort.Ascend:\n                                sortSql.Append(\"ASC\");\n                                break;\n                            case QuerySort.Descend:\n                                sortSql.Append(\"DESC\");\n                                break;\n                            default:\n                                throw new ArgumentOutOfRangeException();\n                        }\n                    }\n                }\n            }\n\n            public static IDictionary<string, object> Read(ListQueryDefinition queryDefinition, Context context) => ReadAsync(queryDefinition, context).GetAwaiter().GetResult();\n            public static async Task<IDictionary<string, object>> ReadAsync(ListQueryDefinition queryDefinition, Context context)\n            {\n                return await QueryDatabase();\n\n                async Task<Dictionary<string, object>> QueryDatabase()\n                {\n                    string connectionString = await ERP.Connection.GetConnectionStringAsync(context, queryDefinition.ErpCompany);\n\n                    Dictionary<string, object> entityData = new Dictionary<string, object>();\n\n                    using (SqlConnection connection = new SqlConnection(connectionString))\n                    {\n                        await connection.OpenAsync();\n                        using (SqlCommand command = new SqlCommand(queryDefinition.QueryString, connection))\n                        using (SqlDataReader dataReader = await command.ExecuteReaderAsync())\n                        {\n                            if (dataReader.HasRows)\n                            {\n                                await dataReader.ReadAsync();\n                                for (short j = 0; j < dataReader.FieldCount; j++)\n                                {\n                                    var nome = dataReader.GetName(j);\n                                    entityData.Add(nome, dataReader[nome]);\n                                }\n                            }\n                            else\n                            {\n                                throw new Exception(\"No Results Found\");\n                            }\n                        }\n                    }\n\n                    return entityData;\n                }\n            }\n        }\n\n        public class ReadListResult\n        {\n            public int NumberOfRecords { get; set; }\n            public List<IDictionary<string, object>> Data { get; set; }\n        }\n\n        public class ListQueryDefinition\n        {\n            public string ErpCompany { get; set; }\n            public QueryContext QueryContext { get; set; }\n            public string QueryString { get; set; }\n            public string QuerySort { get; set; }\n            public int? Page { get; set; } = 0;\n            public int? Rows { get; set; } = 25;\n            public string KeyParameter { get; set; }\n            public bool IsPaginatedQuery { get; set; } = true;\n            public Dictionary<string, string> Parameters { get; set; } = new Dictionary<string, string>();\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "MemoryCache",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "\tusing Omnia.Libraries.Infrastructure.Behaviours;\n    using global::System;\n    using global::System.Collections.Concurrent;\n    using global::System.Collections.Generic;\n    using global::System.Net.Http;\n    using global::System.Threading.Tasks;\n\n    namespace Cache\n    {\n        public abstract class MemoryCache<T>\n        {\n            protected MemoryCache() { }\n            protected abstract string KeyPrefix { get; set; }\n            public T GetEntry(string key, Context context) => GetEntryAsync(key, context).ConfigureAwait(false).GetAwaiter().GetResult();\n            public async Task<T> GetEntryAsync(string key, Context context)\n            {\n                var cache = context.CreateCacheClient();\n                var entryKey = Key(key);\n\n\n                var entry = await cache.GetAsync<T>(entryKey);\n\n                if (entry == null)\n                {\n                    entry = await ValueFactoryAsync(key, context);\n                    if (entry != null)\n                        await cache.SetAsync(entryKey, entry);\n                }\n\n                return entry;\n            }\n            public void RemoveEntry(string key, Context context) => RemoveEntryAsync(key, context).ConfigureAwait(false).GetAwaiter().GetResult();\n            public async Task RemoveEntryAsync(string key, Context context) => await context.CreateCacheClient().RemoveAsync(Key(key));\n            protected virtual T ValueFactory(string key, Context context) => ValueFactoryAsync(key, context).ConfigureAwait(false).GetAwaiter().GetResult();\n            protected virtual async Task<T> ValueFactoryAsync(string key, Context context) => await Task.Run(() => default(T));\n            private string Key(string key) => $\"{KeyPrefix}.{key}\";\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "PrimaveraDatabaseCache",
      "path": "",
      "type": "Expression",
      "version": null,
      "expression": "    using Omnia.Libraries.Infrastructure.Behaviours;\n    using global::System;\n    using global::System.Collections.Concurrent;\n    using global::System.Collections.Generic;\n    using global::System.Net.Http;\n    using global::System.Linq;\n    using global::System.Threading.Tasks;\n\n    namespace Cache\n    {\n        public sealed class PrimaveraDatabaseCache : MemoryCache<PrimaveraDatabaseCache.PrimaveraData>\n        {\n            public static PrimaveraDatabaseCache Instance { get; } = new PrimaveraDatabaseCache();\n\n            protected override string KeyPrefix { get; set; } = \"PrimaveraDatabase\";\n\n            protected override PrimaveraData ValueFactory(string key, Context context) => ValueFactoryAsync(key, context).ConfigureAwait(false).GetAwaiter().GetResult();\n\n            protected override async Task<PrimaveraData> ValueFactoryAsync(string key, Context context)\n            {\n                var httpClient = context.CreateApplicationHttpClient();\n\n                var requestResult = await httpClient.PostAsJsonAsync(\"queries/PrimaveraDbInstanceQuery/Default\", new\n                {\n                    Filter = new\n                    {\n                        Property = \"_code\",\n                        Value = key\n                    }\n                });\n\n                await ApiHelpers.RequestResults.EnsureSuccessApiResultAsync(requestResult, context);\n                return (await requestResult.Content.ReadAsAsync<List<PrimaveraData>>())?.FirstOrDefault();\n            }\n\n            public class PrimaveraData\n            {\n                public string _code { get; set; }\n                public string _name { get; set; }\n                public string databaseinstance { get; set; }\n            }\n        }\n    }",
      "description": "",
      "assemblyName": "",
      "executionLocation": "External"
    },
    {
      "name": "SystemRuntimeCaching",
      "path": "System.Runtime.Caching.dll",
      "type": "File",
      "version": null,
      "expression": "namespace CodeDependencies {\n    \n}",
      "description": "",
      "assemblyName": "System.Runtime.Caching",
      "executionLocation": "External"
    }
  ]
}