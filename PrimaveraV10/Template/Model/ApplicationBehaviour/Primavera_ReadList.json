{
  "name": "Primavera_ReadList",
  "dataSource": "Primavera",
  "expression": "int page = 0;\r\nint rows = 25;\r\n\r\nErpBS bsERP = new ErpBS();\r\nvar result = new Dictionary<string, object>();\r\nvar data = new List<IDictionary<string, object>>();\r\nif (!args.ContainsKey(\"Company\"))\r\n\tthrow new Exception(\"Company was not sent\");\r\n\r\nif (!args.ContainsKey(\"Page\"))\r\n\tthrow new Exception(\"Page was not sent\");\r\n\r\nif (!args.ContainsKey(\"KeyParameter\"))\r\n\tthrow new Exception(\"Key Parameter was not sent\");\r\n\r\nvar erpCompany = args[\"Company\"].ToString();\r\nvar keyParameter = args[\"KeyParameter\"].ToString();\r\npage = Convert.ToInt32(args[\"Page\"].ToString());\r\n\r\nif (args.ContainsKey(\"Rows\"))\r\n\trows = Convert.ToInt32(args[\"Rows\"].ToString());\r\n\r\nvar parameters = new Dictionary<string, string>();\r\nstring innerQuery = null;\r\n\r\nif (args.ContainsKey(\"Parameters\"))\r\n\tparameters = (Dictionary<string, string>)args[\"Parameters\"];\r\n\r\n\r\nvar filterSql = new StringBuilder();\r\nvar sortSql = new StringBuilder();\r\n\r\nQueryContext queryContext = null;\r\nif (args.ContainsKey(\"QueryContext\"))\r\n{\r\n\tqueryContext = (QueryContext)args[\"QueryContext\"];\r\n\tinnerQuery = queryContext.QueryDefinition?.Expression;\r\n\tBuildFilter(queryContext.Filter);\r\n\tBuildSort();\r\n\t\r\n\tforeach(var parameter in queryContext.Parameters)\r\n\t\tparameters.Add(parameter.Name, parameter.Value?.ToString());\r\n}\r\n\r\nif (args.ContainsKey(\"Query\"))\r\n\tinnerQuery = args[\"Query\"].ToString();\r\n\r\nif (string.IsNullOrEmpty(innerQuery))\r\n\tthrow new ArgumentNullException(\"Missing query to execute PrimaveraReadList\");\r\n\r\n// Apply parameters\r\nforeach (var entry in parameters)\r\n\tinnerQuery = innerQuery.Replace($\"@{entry.Key}@\", entry.Value);\r\n\r\n\r\nvar filterSqlAsString = filterSql.ToString();\r\n\r\nstring query = \"SELECT * FROM \" +\r\n\t\"(SELECT Count(@OMNIA_QUERYKEYPARAMETER@) over() as _OMNIA_NUMBER_OF_ROWS_, ROW_NUMBER() OVER(ORDER BY @OMNIA_QUERYSORT@) AS _OMNIA_ROW_NUMBER_, INNER_TBL.* FROM ( \" +\r\n\t\"@OMNIA_QUERY@ \" +\r\n\t\") AS INNER_TBL \" +\r\n\t(string.IsNullOrEmpty(filterSqlAsString) ? \"\" : \"WHERE (\" + filterSql.ToString() + \") \") +\r\n\t\") AS TBL \" +\r\n\t\"WHERE _OMNIA_ROW_NUMBER_ BETWEEN ((@OMNIA_PAGE@ - 1) * @OMNIA_ROWS@ + 1) AND (@OMNIA_PAGE@ * @OMNIA_ROWS@) \";\r\n\r\n\r\nquery = query.Replace(\"@OMNIA_QUERY@\", innerQuery)\r\n\t.Replace(\"@OMNIA_PAGE@\", page.ToString())\r\n\t.Replace(\"@OMNIA_ROWS@\", rows.ToString())\r\n\t.Replace(\"@OMNIA_QUERYKEYPARAMETER@\", keyParameter.ToString())\r\n\t.Replace(\"@OMNIA_QUERYSORT@\", OrderByClause());\r\n\r\nDictionary<string, object> arguments = new Dictionary<string, object>();\r\narguments.Add(\"Company\", erpCompany);\r\n\r\nIDictionary<string, object> erpBs = PrimaveraApplicationBehaviours.Primavera_OpenCompany(arguments, context);\r\nif (erpBs.ContainsKey(\"ErpBS\"))\r\n{\r\n\tbsERP = (ErpBS)erpBs[\"ErpBS\"];\r\n}\r\nelse\r\n{\r\n    throw new Exception(\"Error opening ERP Company\");\r\n}\r\n\r\nStdBELista queryResults = bsERP.Consulta(query);\r\n\r\nint numberOfRecords = 0;\r\n\r\nint numLinhas = queryResults.NumLinhas();\r\nint numColunas = queryResults.NumColunas();\r\nstring[] headers = new string[numColunas];\r\nfor (short i = 0; i < numColunas; i++)\r\n{\r\n\theaders[i] = queryResults.Nome(i);\r\n}\r\n\r\nfor (short i = 0; i < numLinhas; i++)\r\n{\r\n\tif (numberOfRecords == 0)\r\n\t{\r\n\t\tnumberOfRecords = Convert.ToInt32(queryResults.Valor(\"_OMNIA_NUMBER_OF_ROWS_\"));\r\n\t}\r\n\r\n\tDictionary<string, object> entityData = new Dictionary<string, object>();\r\n\tfor (short j = 0; j < numColunas; j++)\r\n\t{\r\n\t\tvar nome = headers[j];\r\n\t\tif(!nome.Equals(\"_OMNIA_NUMBER_OF_ROWS_\") && !nome.Equals(\"_OMNIA_ROW_NUMBER_\"))\r\n\t\t\tentityData.Add(nome, queryResults.Valor(nome));\r\n\t}\r\n\r\n\tqueryResults.Seguinte();\r\n\tdata.Add(entityData);\r\n}\r\n\r\nresult.Add(\"NumberOfRecords\", numberOfRecords);\r\nresult.Add(\"Data\", data);\r\nbsERP.FechaEmpresaTrabalho();\r\nreturn result;\r\n\r\n\r\nstring OrderByClause()\r\n{\r\n\tvar sortSqlText = sortSql.ToString();\r\n\r\n\tif (!string.IsNullOrEmpty(sortSqlText))\r\n\t\treturn sortSqlText;\r\n\r\n\tif (args == null || !args.ContainsKey(\"Sort\"))\r\n\t\treturn keyParameter.ToString();\r\n\r\n\tvar sort = args[\"Sort\"].ToString();\r\n\treturn sort;\r\n}\r\n\r\nvoid BuildFilter(QueryRequestFilter queryFilter)\r\n{\r\n\tif (queryFilter == null) return;\r\n\r\n\tswitch (queryFilter)\r\n\t{\r\n\t\tcase UnaryQueryRequestFilter unaryFilter:\r\n\t\t\t{\r\n\t\t\t\tfilterSql.Append(unaryFilter.Path);\r\n\t\t\t\t\r\n\t\t\t\tif(unaryFilter.Value == null){\r\n\t\t\t\t\tfilterSql.Append(\" IS NULL \");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tswitch (unaryFilter.Operator)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase QueryComparisonOperator.EqualTo:\r\n\t\t\t\t\t\tfilterSql.Append(\" = \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.GreaterThan:\r\n\t\t\t\t\t\tfilterSql.Append(\" > \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.LessThan:\r\n\t\t\t\t\t\tfilterSql.Append(\" < \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.GreaterThanOrEqualTo:\r\n\t\t\t\t\t\tfilterSql.Append(\" >= \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.LessThanOrEqualTo:\r\n\t\t\t\t\t\tfilterSql.Append(\" <= \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.NotEqualTo:\r\n\t\t\t\t\t\tfilterSql.Append(\" <> \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryComparisonOperator.Like:\r\n\t\t\t\t\t\tfilterSql.Append(\" LIKE CONCAT('%', \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new ArgumentOutOfRangeException();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (unaryFilter.Value)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase string s:\r\n\t\t\t\t\t\tfilterSql.Append($\"'{s}'\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase DateTime d:\r\n\t\t\t\t\t\tfilterSql.Append($\"'{d.ToString(\"yyyy-MM-dd\")}'\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfilterSql.Append(unaryFilter.Value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (unaryFilter.Operator.Equals(QueryComparisonOperator.Like))\r\n\t\t\t\t\tfilterSql.Append(\", '%')\");\r\n\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tcase BinaryQueryRequestFilter binaryFilter:\r\n\t\t\t{\r\n\t\t\t\tfilterSql.Append('(');\r\n\t\t\t\tBuildFilter(binaryFilter.Left);\r\n\r\n\t\t\t\tswitch (binaryFilter.Operator)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase QueryLogicalOperator.And:\r\n\t\t\t\t\t\tfilterSql.Append(\" AND \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase QueryLogicalOperator.Or:\r\n\t\t\t\t\t\tfilterSql.Append(\" OR \");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new ArgumentOutOfRangeException();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tBuildFilter(binaryFilter.Right);\r\n\t\t\t\tfilterSql.Append(')');\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nvoid BuildSort()\r\n{\r\n\tif (queryContext.Sort == null || queryContext.Sort.Length == 0) return;\r\n\r\n\tfor (var i = 0; i < queryContext.Sort.Length; i++)\r\n\t{\r\n\t\tif (i > 0)\r\n\t\t\tsortSql.Append(\", \");\r\n\r\n\t\tsortSql.Append(queryContext.Sort[i].Property)\r\n\t\t\t.Append(\" \");\r\n\r\n\t\tswitch (queryContext.Sort[i].Direction)\r\n\t\t{\r\n\t\t\tcase QuerySort.Ascend:\r\n\t\t\t\tsortSql.Append(\"ASC\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase QuerySort.Descend:\r\n\t\t\t\tsortSql.Append(\"DESC\");\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new ArgumentOutOfRangeException();\r\n\t\t}\r\n\t}\r\n}",
  "description": "",
  "executionLocation": "External",
  "behaviourNamespaces": [
    {
      "name": "NetHttp",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "System.Net.Http"
    },
    {
      "name": "SystemText",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "System.Text"
    },
    {
      "name": "StdBE100",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "StdBE100"
    },
    {
      "name": "ErpBS100",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "ErpBS100"
    }
  ]
}