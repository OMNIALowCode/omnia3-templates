{
  "name": "Primavera_OpenCompany",
  "dataSource": "Primavera",
  "expression": "            Dictionary<string, object> result = new Dictionary<string, object>();\r\n\r\n            string erpCompany = string.Empty;\r\n            StdBETipos.EnumTipoPlataforma platformType = StdBETipos.EnumTipoPlataforma.tpEmpresarial;\r\n\r\n            if (context.Operation.DataSourceType.Equals(\"Primavera\", StringComparison.InvariantCultureIgnoreCase))\r\n            {\r\n                erpCompany = context.Operation.DataSource;\r\n            }\r\n            else\r\n            {\r\n                if (!args.ContainsKey(\"Company\"))\r\n                    throw new Exception(\"Company was not sent \");\r\n                else\r\n                    erpCompany = args[\"Company\"].ToString();\r\n            }\r\n            try\r\n            {\r\n                var httpClient = context.CreateApplicationHttpClient();\r\n                var requestResult = httpClient.GetAsync($\"Primavera/Default/{erpCompany}\").Result;\r\n\r\n                PrimaveraApplicationBehaviours.Primavera_EnsureSuccessApiResult(new Dictionary<string, object>\r\n                {\r\n                    {\"requestResult\", requestResult}\r\n                }, context);\r\n\r\n                PrimaveraDto primavera = requestResult.Content.ReadAsAsync<PrimaveraDto>().Result;\r\n                Enum.TryParse(primavera.PlatformType, out platformType);\r\n                var decryptArgs = new Dictionary<string, object> { { \"EncryptedText\", primavera.Password } };\r\n                var decrypted = PrimaveraApplicationBehaviours.Primavera_Decrypt(decryptArgs);\r\n                List<IDictionary<string, object>> entityList = new List<IDictionary<string, object>>();\r\n                ErpBS bsERP = new ErpBS();\r\n                bsERP.AbreEmpresaTrabalho(platformType, erpCompany, primavera.Username, decrypted[\"DecryptedText\"].ToString());\r\n                result.Add(\"ErpBS\", bsERP);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                throw new Exception($\"Error opening ERP Company: {ex.Message}\");\r\n            }\r\n\r\n            return result;",
  "description": "Opens ERP Company and returns ErpBS object to be used on other behaviours",
  "executionLocation": "External",
  "behaviourNamespaces": [
    {
      "name": "NetHttp",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "System.Net.Http"
    },
    {
      "name": "ErpBS100",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "ErpBS100"
    },
    {
      "name": "StdBE100",
      "description": "",
      "executionLocation": "External",
      "fullyQualifiedName": "StdBE100"
    }
  ]
}